[EN] This folder works very similarly to the pages folder from the intermediate structure, but instead of grouping by page we are instead grouping by feature. Already this is easier to understand as a developer since in 90% of cases when you are going to add new code to a project you are either going to implement a new feature, such as adding user accounts, or you are going to modify an existing feature, such as adding the ability to edit todos. This makes working with the code easier since all the code for each feature is collocated in the same place making it easy to update and add to.

The actual structure of this folder follows the pages structure in that there are individual folders for each feature (authentication, todos, projects, etc.) and inside those folders are all the files for that feature. The biggest difference you will notice between the pages folder and the features folder, though, is that within each feature you have another set of folders. This folder structure for each feature is a complete copy of all the folders inside the src folder (other than the features folder obviously) and an index.js file. This means that within your feature all your code can be organized by type (context, hook, etc.) while still be collocated together.

The index.js file is then used as a way to expose a public API for everything that is usable outside the feature folder for that given feature. It is common that you will want to have a bunch of code that is private to the specific feature you are working on, but with JS if you create an export in a file it can be used in any other file you want. In larger projects this can become a problem if we only want to expose a few components/methods for our feature which is where the index.js file comes in. This file should export only the code you want to be accessible outside the feature and then every time you use code for this feature in your application you should import it from the index.js file. Doing this is really nice since your global code footprint is much smaller this way and using the features becomes easier since you have a limited API to work with. This can even be enforced by an ESLint rule which disallows any import from a feature folder that doesn’t come from index.js.

================================================================================================================================================================================================================================================================

[FR] Ce dossier fonctionne de manière très similaire au dossier des pages de la structure intermédiaire, mais au lieu de regrouper par page, nous regroupons par fonctionnalité. Cela est déjà plus facile à comprendre en tant que développeur puisque, dans 90% des cas, lorsque vous ajoutez du nouveau code à un projet, vous allez soit implémenter une nouvelle fonctionnalité, comme ajouter des comptes utilisateurs, soit modifier une fonctionnalité existante, comme ajouter la possibilité de modifier des tâches. Cela rend le travail avec le code plus facile puisque tout le code pour chaque fonctionnalité est rassemblé au même endroit, ce qui facilite les mises à jour et les ajouts.

La structure réelle de ce dossier suit celle des pages en ce sens qu'il y a des dossiers individuels pour chaque fonctionnalité (authentification, tâches, projets, etc.) et à l'intérieur de ces dossiers se trouvent tous les fichiers relatifs à cette fonctionnalité. La plus grande différence que vous remarquerez entre le dossier des pages et le dossier des fonctionnalités est qu'à l'intérieur de chaque fonctionnalité, vous avez un autre ensemble de dossiers. Cette structure de dossiers pour chaque fonctionnalité est une copie complète de tous les dossiers à l'intérieur du dossier src (à l'exception évidemment du dossier des fonctionnalités) et un fichier index.js. Cela signifie qu'à l'intérieur de votre fonctionnalité, tout votre code peut être organisé par type (contexte, hook, etc.) tout en étant regroupé ensemble.

Le fichier index.js est ensuite utilisé comme un moyen d'exposer une API publique pour tout ce qui est utilisable en dehors du dossier de la fonctionnalité en question. Il est courant de vouloir avoir beaucoup de code privé à la fonctionnalité spécifique sur laquelle vous travaillez, mais avec JS, si vous créez une exportation dans un fichier, elle peut être utilisée dans n'importe quel autre fichier. Dans les projets plus importants, cela peut devenir un problème si nous ne voulons exposer que quelques composants/méthodes pour notre fonctionnalité, c'est là que le fichier index.js intervient. Ce fichier doit uniquement exporter le code que vous voulez rendre accessible en dehors de la fonctionnalité et chaque fois que vous utilisez du code pour cette fonctionnalité dans votre application, vous devez l'importer depuis le fichier index.js. Faire cela est vraiment avantageux puisque votre empreinte de code globale est ainsi beaucoup plus petite et l'utilisation des fonctionnalités devient plus facile puisque vous avez une API limitée à manipuler. Cela peut même être appliqué par une règle ESLint qui interdit toute importation d'un dossier de fonctionnalité qui ne provient pas de index.js